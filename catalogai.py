import streamlit as st
import google.generativeai as genai
from google.api_core.exceptions import GoogleAPIError  # Import corrected

# --- Configura√ß√£o (oculte a chave API) ---
with open("api_key.txt") as f:
    api_key = f.read().strip()
genai.configure(api_key=api_key)

# --- Configura√ß√£o do modelo ---
generation_config = {"candidate_count": 1, "temperature": 0.7}

# √â altamente recomend√°vel manter os filtros de seguran√ßa ativados!
safety_settings = {
    'HATE': 'BLOCK_NONE',
    'HARASSMENT': 'BLOCK_NONE',
    'SEXUAL' : 'BLOCK_NONE',
    'DANGEROUS' : 'BLOCK_NONE'
}

# Inicializando o modelo
model = genai.GenerativeModel(
    model_name='gemini-1.5-pro-latest',
    generation_config=generation_config,
    safety_settings=safety_settings,
)

# --- Instru√ß√µes do sistema ---
# Instru√ß√£o para resposta personalizada
resposta_personalizada_instruction = """
Voc√™ √© um especialista em filmes, animes e s√©ries, com um estilo de comunica√ß√£o divertido e informal. Sua tarefa √© criar uma resposta personalizada para um usu√°rio que acabou de inserir uma lista de t√≠tulos.

Siga estas regras:
* Referencie os t√≠tulos: Mencione pelo menos um ou dois t√≠tulos da lista do usu√°rio.
* Adapte ao g√™nero: Fa√ßa coment√°rios relacionados ao g√™nero identificado na lista.
* Seja informal e divertido: Use linguagem coloquial e express√µes que engajem o usu√°rio.
* Inclua uma frase de transi√ß√£o: Inclua uma frase que conecte a resposta personalizada com as recomenda√ß√µes, como "Saca s√≥ essas recomenda√ß√µes que separei para voc√™:" ou "Prepare-se para maratonar, porque aqui v√£o minhas dicas:".

Exemplos:
* T√≠tulos: Deadpool, Vingadores, Homem de Ferro
* Resposta: E a√≠, f√£ da Marvel? Deadpool √© hil√°rio, n√©? E os Vingadores, ent√£o? Que time! üí™ Se liga nessas outras dicas que tenho pra voc√™:
* T√≠tulos: O Senhor dos An√©is, Game of Thrones, The Witcher
* Resposta: Aventura √©pica √© com voc√™, n√©? O Senhor dos An√©is √© um cl√°ssico, Game of Thrones tem reviravoltas incr√≠veis... Mas calma que tem mais! D√° uma olhada nessas outras sugest√µes:
* T√≠tulos: Parasita, Coringa, O Poderoso Chef√£o
* Resposta: Gosta de filmes que te fazem pensar, hein? Parasita √© sensacional, Coringa √© perturbador... E a√≠, bora ver mais uns filmes nesse estilo? üòâ
"""
# Instru√ß√£o para identificar o g√™nero
identificar_genero_instruction = """
Voc√™ √© um especialista em filmes, animes e s√©ries. Sua tarefa √© identificar o(s) g√™nero(s) predominante(s) em uma lista de t√≠tulos. Considere subg√™neros e nuances para uma an√°lise mais precisa.

Responda apenas com o(s) nome(s) do(s) g√™nero(s), separados por barra (/) se houver mais de um.

Exemplos:
* T√≠tulos: The Walking Dead, Guerra Mundial Z, Zumbil√¢ndia
    G√™nero: Terror/Zumbi
* T√≠tulos: Your Name, A Viagem de Chihiro, O Castelo Animado
    G√™nero: Fantasia/Anime
* T√≠tulos: O Senhor dos An√©is, Game of Thrones, The Witcher
    G√™nero: Fantasia Medieval
* T√≠tulos: Parasita, Coringa, O Poderoso Chef√£o
    G√™nero: Drama/Thriller/Com√©dia Negra 
* T√≠tulos: Deadpool, Se Beber, N√£o Case!, Miss√£o Madrinha de Casamento
    G√™nero: A√ß√£o/Com√©dia
* T√≠tulos: John Wick, Mad Max: Estrada da F√∫ria, Busca Implac√°vel
    G√™nero: A√ß√£o
* T√≠tulos: Blade Runner, 2001: Uma Odisseia no Espa√ßo, Duna
    G√™nero: Fic√ß√£o Cient√≠fica
* T√≠tulos: La Casa de Papel, Round 6, Lupin
    G√™nero: Suspense/Thriller
* T√≠tulos: Stranger Things, Dark, The Umbrella Academy
    G√™nero: Fic√ß√£o Cient√≠fica/Mist√©rio
* T√≠tulos: Grey's Anatomy, House, The Good Doctor
    G√™nero: Drama M√©dico
"""

# Instru√ß√£o para recomendar t√≠tulos
recomendar_instruction = """
Voc√™ √© um assistente especializado em recomendar animes, filmes e s√©ries.

Siga estas regras:
* Hist√≥rico: Evite recomendar t√≠tulos que j√° foram recomendados anteriormente e est√£o presentes no hist√≥rico.
* Recomenda√ß√µes √∫nicas: Nunca sugira o mesmo t√≠tulo que o usu√°rio forneceu como entrada.
* Diversidade: Recomende um filme, um anime e uma s√©rie, um de cada, a menos que o usu√°rio especifique o contr√°rio.
* Personaliza√ß√£o: Leve em considera√ß√£o o g√™nero identificado na lista de t√≠tulos fornecida pelo usu√°rio.
* Formato da resposta: Separe as recomenda√ß√µes com "===" e use o seguinte formato para cada recomenda√ß√£o:
    * Tipo: [Filme, Anime ou S√©rie]
    * T√≠tulo: [T√≠tulo]
    * Sinopse: [Breve sinopse]
    * Chances de Voc√™ Gostar: [Alta, M√©dia ou Baixa]

Exemplo:

Informa√ß√£o: The Walking Dead, Guerra Mundial Z, Zumbil√¢ndia, John Wick, Mad Max
Resposta:
===
Tipo: Filme
T√≠tulo: Army of the Dead
Sinopse: Um grupo de mercen√°rios planeja um assalto a um cassino em Las Vegas durante um surto de zumbis.
Chances de Voc√™ Gostar: Alta
===
Tipo: Anime
T√≠tulo: Highschool of the Dead
Sinopse: Um grupo de estudantes precisa lutar para sobreviver a um apocalipse zumbi.
Chances de Voc√™ Gostar: M√©dia
===
Tipo: S√©rie
T√≠tulo: Kingdom
Sinopse: Um pr√≠ncipe coreano precisa enfrentar uma misteriosa praga zumbi que est√° devastando o reino.
Chances de Voc√™ Gostar: Alta

Informa√ß√£o: O Senhor dos An√©is: A Sociedade do Anel, Game of Thrones, The Witcher
Resposta: 
===
Tipo: Filme
T√≠tulo: Willow: Na Terra da Magia
Sinopse: Um fazendeiro an√£o embarca em uma jornada para proteger um beb√™ com um destino m√°gico.
Chances de Voc√™ Gostar: Alta
===
Tipo: Anime
T√≠tulo: Berserk
Sinopse: Um guerreiro solit√°rio chamado Guts luta contra dem√¥nios e busca vingan√ßa em um mundo sombrio.
Chances de Voc√™ Gostar: M√©dia
===
Tipo: S√©rie
T√≠tulo: A Roda do Tempo
Sinopse: Uma jovem descobre que √© a reencarna√ß√£o de uma poderosa feiticeira e precisa salvar o mundo de uma for√ßa maligna.
Chances de Voc√™ Gostar: Alta

Informa√ß√£o: Parasita, Coringa, O Poderoso Chef√£o
Resposta: 
===
Tipo: Filme
T√≠tulo: Seven: Os Sete Crimes Capitais
Sinopse: Dois detetives investigam uma s√©rie de assassinatos inspirados nos sete pecados capitais.
Chances de Voc√™ Gostar: Alta
===
Tipo: Anime
T√≠tulo: Psycho-Pass
Sinopse: Em um futuro dist√≥pico, a pol√≠cia utiliza um sistema que prev√™ crimes antes que eles aconte√ßam.
Chances de Voc√™ Gostar: Alta
===
Tipo: S√©rie
T√≠tulo: Mindhunter
Sinopse: Dois agentes do FBI entrevistam serial killers para entender suas mentes e desenvolver novas t√©cnicas de investiga√ß√£o.
Chances de Voc√™ Gostar: Alta

Informa√ß√£o: Deadpool, Se Beber, N√£o Case!, Miss√£o Madrinha de Casamento
Resposta:
===
Tipo: Filme
T√≠tulo: Anjos da Lei
Sinopse: Dois policiais jovens e imaturos se disfar√ßam de estudantes do ensino m√©dio para investigar uma rede de drogas.
Chances de Voc√™ Gostar: Alta
===
Tipo: Anime
T√≠tulo: Gintama
Sinopse: Um samurai exc√™ntrico e seu aprendiz vivem aventuras hil√°rias em um Jap√£o feudal futurista.
Chances de Voc√™ Gostar: Alta
===
Tipo: S√©rie
T√≠tulo: Brooklyn Nine-Nine
Sinopse: Uma delegacia de pol√≠cia no Brooklyn √© palco de situa√ß√µes engra√ßadas e investiga√ß√µes criminais.
Chances de Voc√™ Gostar: Alta
"""
# Inicializa o hist√≥rico na session state
if 'historico' not in st.session_state:
    st.session_state.historico = []

# --- Fun√ß√£o para obter recomenda√ß√µes ---
def obter_recomendacoes(titulos, historico):
    try:
        chat = model.start_chat(history=[]) 
        prompt_genero = f"T√≠tulos: {', '.join(titulos)}\nG√™nero: "
        response_genero = chat.send_message(identificar_genero_instruction + prompt_genero)
        genero = response_genero.text.strip()

        # Gera√ß√£o da resposta personalizada
        prompt_personalizado = f"T√≠tulos: {', '.join(titulos)}\nHist√≥rico: {', '.join(historico)}\nResposta: "
        response_personalizada = chat.send_message(resposta_personalizada_instruction + prompt_personalizado)
        resposta_personalizada = response_personalizada.text.strip()

        # Instru√ß√£o de recomenda√ß√£o modificada para incluir o hist√≥rico
        prompt_recomendacoes = f"""
        Informa√ß√£o: {', '.join(titulos)}
        Hist√≥rico: {', '.join(historico)}
        Resposta: 
        """
        response_recomendacoes = chat.send_message(recomendar_instruction + prompt_recomendacoes)
        return genero, resposta_personalizada, response_recomendacoes.text.strip()

        prompt_recomendacoes = f"Informa√ß√£o: {', '.join(titulos)}.\nResposta:\n"
        response_recomendacoes = chat.send_message(recomendar_instruction + prompt_recomendacoes)
        return genero, resposta_personalizada, response_recomendacoes.text.strip()
    except GoogleAPIError as e:
        if e.code == 429: 
            st.error(f"Erro na API do Gemini: {e}. Aguarde alguns instantes e tente novamente.")
        else:
            st.error(f"Erro na API do Gemini: {e}")
        return None, None, None  # Retorna None para todos os valores em caso de erro

# --- Interface do Streamlit ---
st.title("‚ú® CatalogAI: Seu Guia Personalizado para Filmes, Animes e S√©ries ‚ú®")
st.write("Conte-nos seus gostos e o CatalogAI usar√° intelig√™ncia artificial para te recomendar filmes, animes e s√©ries que voc√™ vai amar! ü§ñüçø")
st.write("**Experimente:** Digite 'Stranger Things, Naruto, Your Name' e veja o que o CatalogAI recomenda!")

if "titulos_input" not in st.session_state:
    st.session_state.titulos_input = ""

titulos_input = st.text_area(
    "Insira os t√≠tulos que voc√™ gosta, separados por v√≠rgula:",
    value=st.session_state.titulos_input,
)
titulos = [t.strip() for t in titulos_input.split(",")]

if "recomendacoes" not in st.session_state:
    st.session_state.recomendacoes = None

if "genero" not in st.session_state:  # Inicializa o genero na session state
    st.session_state.genero = None

# Bot√£o condicional
if st.button("Obter Recomenda√ß√µes"):
    if all(titulos):
        with st.spinner("Pensando em recomenda√ß√µes incr√≠veis..."):
            resultado_recomendacoes = obter_recomendacoes(titulos, st.session_state.historico)

        if resultado_recomendacoes is not None:
            st.session_state.genero, st.session_state.resposta_personalizada, recomendacoes_str = resultado_recomendacoes

            if st.session_state.genero and recomendacoes_str and st.session_state.resposta_personalizada:
                st.session_state.recomendacoes = recomendacoes_str

                # Adiciona os novos t√≠tulos recomendados ao hist√≥rico
                novas_recomendacoes = [linha.split(":")[1].strip() for linha in recomendacoes_str.split("\n") if linha.startswith("T√≠tulo:")]
                st.session_state.historico.extend(novas_recomendacoes)

            else:
                st.warning("Por favor, insira pelo menos um t√≠tulo.")
        else:
            st.error("Ocorreu um erro ao obter as recomenda√ß√µes. Tente novamente mais tarde.")

# Exibe as recomenda√ß√µes (se houver)
if st.session_state.recomendacoes:
    st.write(st.session_state.resposta_personalizada)  # Exibe a resposta personalizada
    recomendacoes = st.session_state.recomendacoes.split("===")
    for recomendacao in recomendacoes:
        if recomendacao.strip():  # Check for empty recommendations
            linhas = recomendacao.strip().split("\n")
            tipo = linhas[0].split(":")[1].strip() if len(linhas) > 0 else "Tipo n√£o especificado"

            # Use try-except to para possiveis erros
            try:
                titulo = linhas[1].split(":")[1].strip()
            except IndexError:
                titulo = "T√≠tulo n√£o especificado"

            try:
                sinopse = linhas[2].split(":")[1].strip()
            except IndexError:
                sinopse = "Sinopse n√£o dispon√≠vel"

            try:
                chances = linhas[3].split(":")[1].strip()
            except IndexError:
                chances = "Chances de gostar n√£o especificadas"

            st.markdown(f"## **{tipo}: {titulo}**")
            st.write(f"_{sinopse}_")
            st.write(f"**Chances de Voc√™ Gostar:** {chances}")

# Bot√£o "Refazer Teste"
if st.session_state.recomendacoes and st.button("Refazer Teste"):
    st.session_state.recomendacoes = None
    st.experimental_rerun()  # Recarrega a p√°gina para gerar novas recomenda√ß√µes com o hist√≥rico